#!/usr/bin/env php
<?php
/*
 * Курс бойца PHP-шного фронта
 * Наглядный пример применения классов в PHP
 * Тема - зачем эти придумали классы.
 * 19.03.2013
 */

//Инитим массив  
$argv1=array('','./data/file.csv');
//Создаем экземпляр класса и передаем ему аргумент - массив
$app=new Main($argv1);
//Вызов функции, прошу заметить - эта функция определена только в классе csv 
$app->summ();
//та же беда - вызов функции получения результата и вывод на консоль посредством echo
echo $app->getresult();
// Все что надо сделанно и последующий выход и завершение. Все что надо еще для работы написано ниже exit
exit;



/// Описание классов можно вынести в другой файл, но так проще все в одном показать.

//Определение класса работы с CSV файлом
class csvfile {

  private $filename;
  private $filedescr;
  private $sum;
//Конструктор класса csv
  function __construct($filename) {
    //запоминаем имя файла - будем работать с ним
    $this->filename = $filename;
    //Открываем файл $this->filename на чтение и дескриптор заносим в  $this->filedescr
    $this->filedescr = fopen($this->filename, 'r');
  }
  // Так называемый деструктор - выполняется тогда когда класс разрушается - например при завершении выполнения программы
  function destructor() {
    //Если у нас открыт дескриптор файла - закроем его. Если нет - то видимо либо не открыли, либо закрыли ранее
    if ($this->filedescr)
      fclose($this->filedescr);
  }
  //Функция суммирования
  function summ() {
    //Обнуляем и инициализируем переменную, если не сделать этого то вызовет предупреждение, но работать и без этого будет
    //Правильнее определить сразу, чем погасить предупреждение (есть возможность)
    $this->sum=0;
    //Построчно считываем открытый ранее csv файл с дескриптором $this->filedescr 
    while (($data = fgetcsv($this->filedescr, 1000, ';')) !== FALSE) {
      //суммируем колонку $data[1] - читай про массивы, нумерация начинается с "0"
      $this->sum = $this->sum + $data[1];
    }
    //выход из цикла - прочитан весь файл
  }
  //Вывод результата суммирования функцией summ
  function getresult(){
    if (!isset($this->sum)) {echo "Надо было перед этим вызвать функцию суммирования";}
    return $this->sum;
  }

  
}

//В данном примере основной класс который наследует все функции и все переменные класса csvfile
class Main extends csvfile{
//Конструктор класса. ВЫзывается самым первым всегда когда инитим данный класс. Напрямую звать не надо.
//Когда пишем new Main($argv) -> выполняем сразу два действия - создание экземпляра и вызов конструктора класса
//Если бы его не было - такое допускается - пришлось бы передавать параметр $argv вызовом другой функции класса
function __construct($argv){
   //Параметр передаваемый должен быть массивом. Така задумка. Если нет - то ошибка и выход.
   if (!is_array($argv)) {
     echo("Надо передать параметры в виде массива");
     exit;
   }
   //Второй параметр массива - должен быть файлом. Иначе ошибка, я так придумал.
   if (!is_file($argv[1])) {
     echo "передаваемый параметр должен быть файлом";
     exit;
   }
   //Шаманство. Вызов в конструкторе конструктора класса csvfile с передачей параметра имени файла как строки
   //Таким образом написав $app=new Main($argv1); - смотри выше - мы убили не два зайца а три
   //А именно - создали экземпляр класса Main, передали параметр, проверили, что он массив, Создали дочку класаа,
   //И позвали конструктор класса csvfile который в свою очередь сделал все то, что было написано ранее в конструкторе csvfile   
   parent::__construct($argv[1]);
}
}



?>
